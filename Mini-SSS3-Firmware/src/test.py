from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric import utils
from cryptography.hazmat.primitives import serialization
import base64

PEM_public_key_first = '-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE'
PEM_public_key_last = '\n-----END PUBLIC KEY-----\n'

# public_key_string = "-----BEGIN PUBLIC KEY-----" + "\n" + \
# "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmFn+aY1pggXrPMpACcVNpQHB+R71C9M3M4/lzuck" + "\n" + \
# "g8aCkwqdE64nO7mWPteCD9fn/UCeQHVrFfIoNVxfTYRRLQ==" + "\n" + \
# "-----END PUBLIC KEY-----\n"

# public_key_hex = [0x3B, 0x3C, 0x19, 0x35, 0x90, 0xDA, 0xE4, 0x6F, 0x64, 0x8C, 0x7E, 0x5E, 0x52, 0x82, 0xA0, 0x98, 
# 0xA2, 0x5D, 0x7C, 0xC2, 0xDD, 0x3D, 0xA4, 0x8E, 0x18, 0xCF, 0x5E, 0xA1, 0x39, 0x73, 0x67, 0x6E,
# 0xDB, 0xD6, 0x25, 0xD2, 0xEC, 0x0E, 0xF7, 0x83, 0x4C, 0xC7, 0xD7, 0x5D, 0x5E, 0x02, 0x1D, 0x41, 
# 0xCB, 0x25, 0xFD, 0x1A, 0x1E, 0xEA, 0x32, 0x6B, 0x61, 0xC6, 0xF4, 0xC1, 0xBC, 0xF2, 0x21, 0x01]

# data_hex = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
# 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]

# signature_hex = [0x86, 0x2B, 0x67, 0x14, 0x1C, 0x06, 0xE7, 0x08, 0xF5, 0xFA, 0x1D, 0x17, 0x8E, 0x81, 0xF9, 0x79, 
# 0x17, 0xBC, 0xBA, 0x85, 0xB4, 0x85, 0xAA, 0xBE, 0x1D, 0x1C, 0x2B, 0xCB, 0xE9, 0x43, 0x96, 0x3F,
# 0xB8, 0xFB, 0x75, 0x25, 0x3B, 0xF0, 0x0E, 0x0A, 0x76, 0x19, 0x58, 0x0F, 0xFA, 0x96, 0xB0, 0xCB, 
# 0x68, 0xED, 0x44, 0x81, 0x9F, 0x7B, 0x91, 0x6F, 0x68, 0x31, 0x4D, 0xC2, 0x83, 0xEE, 0xF6, 0xE3
# ]
public_key_hex= [
0x98, 0x59, 0xFE, 0x69, 0x8D, 0x69, 0x82, 0x05, 0xEB, 0x3C, 0xCA, 0x40, 0x09, 0xC5, 0x4D, 0xA5,
0x01, 0xC1, 0xF9, 0x1E, 0xF5, 0x0B, 0xD3, 0x37, 0x33, 0x8F, 0xE5, 0xCE, 0xE7, 0x24, 0x83, 0xC6,
0x82, 0x93, 0x0A, 0x9D, 0x13, 0xAE, 0x27, 0x3B, 0xB9, 0x96, 0x3E, 0xD7, 0x82, 0x0F, 0xD7, 0xE7,
0xFD, 0x40, 0x9E, 0x40, 0x75, 0x6B, 0x15, 0xF2, 0x28, 0x35, 0x5C, 0x5F, 0x4D, 0x84, 0x51, 0x2D
]

data_hex = [
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
]
signature_hex=[
0x78, 0x8A, 0x34, 0x39, 0x23, 0x79, 0xC9, 0x1B, 0xB2, 0xB6, 0x1E, 0xB5, 0xE1, 0x38, 0xAF, 0x7B,
0x5C, 0x4C, 0xC8, 0x57, 0xD1, 0x72, 0x0D, 0xBD, 0x1E, 0x56, 0xF5, 0x39, 0xCD, 0x33, 0xA2, 0xF5,
0xAA, 0x2C, 0x98, 0x70, 0x20, 0xD1, 0x7C, 0x0A, 0x13, 0x4B, 0x71, 0xEF, 0x1B, 0xF1, 0x4A, 0xB7,
0x37, 0x8F, 0x04, 0xF5, 0xA3, 0x11, 0x42, 0xC5, 0x17, 0x8E, 0xDA, 0xA1, 0x0F, 0x01, 0x73, 0xAF
]

pub_key = bytes(public_key_hex)
print("Puclic key is:", pub_key.hex().upper())
print("")

data = bytes(data_hex)
print("Data is:", data.hex().upper())
print("")
#Load Public Key
PEM_public_key = base64.b64encode(bytes(public_key_hex)).decode('ascii')
public_key_string = PEM_public_key_first + PEM_public_key[:28]+'\n'+ PEM_public_key[28:] + PEM_public_key_last
serialized_public_teensy = bytes(public_key_string,'ascii')
public_key = serialization.load_pem_public_key(serialized_public_teensy,backend=default_backend())

#Convert Signature to DER format
signature_r = 0
signature_s = 0
for i in range(32):
	signature_r = signature_r<<8|signature_hex[i]
	signature_s = signature_s<<8|signature_hex[i+32]
print(hex(signature_r))
print(hex(signature_s))
signature = utils.encode_dss_signature(signature_r,signature_s)
print("Signature is:",bytes(signature_hex).hex().upper())
print("")

#Verify the signature
if public_key.verify(signature,data,ec.ECDSA(hashes.SHA256()))== None:
	print("Verify Signature Successfully!")


########################################################################################################################
#
#
#

server_private_key = ec.generate_private_key(ec.SECP256R1(),default_backend())
server_public_key = (server_private_key.public_key())
#Serializing the server public key
serialized_public = server_public_key.public_bytes(
	encoding=serialization.Encoding.PEM,
	format=serialization.PublicFormat.SubjectPublicKeyInfo)


public_key_hex = ((base64.b64decode(serialized_public.splitlines()[1]).hex()) + \
					(base64.b64decode(serialized_public.splitlines()[2]).hex()))[54:]

public_key_1 = public_key_hex[0:64]
public_key_2 = public_key_hex[64:128]
#print(public_key_hex)
#print(public_key_1)
#print(public_key_2)
public_key_list = []
for k in range(64):
	public_key_list.append('0x'+public_key_hex[2*k]+public_key_hex[2*k+1])

print("Server public Key is:",",".join(public_key_list),'\n')



########################################################################################################################
import ecdsa
from hashlib import sha256
message = b"SystemCyber"
# public_key = '98cedbb266d9fc38e41a169362708e0509e06b3040a5dfff6e08196f8d9e49cebfb4f4cb12aa7ac34b19f3b29a17f4e5464873f151fd699c2524e0b7843eb383'
# sig = '740894121e1c7f33b174153a7349f6899d0a1d2730e9cc59f674921d8aef73532f63edb9c5dba4877074a937448a37c5c485e0d53419297967e95e9b1bef630d'
public_key_hex= [
0x98, 0x59, 0xFE, 0x69, 0x8D, 0x69, 0x82, 0x05, 0xEB, 0x3C, 0xCA, 0x40, 0x09, 0xC5, 0x4D, 0xA5,
0x01, 0xC1, 0xF9, 0x1E, 0xF5, 0x0B, 0xD3, 0x37, 0x33, 0x8F, 0xE5, 0xCE, 0xE7, 0x24, 0x83, 0xC6,
0x82, 0x93, 0x0A, 0x9D, 0x13, 0xAE, 0x27, 0x3B, 0xB9, 0x96, 0x3E, 0xD7, 0x82, 0x0F, 0xD7, 0xE7,
0xFD, 0x40, 0x9E, 0x40, 0x75, 0x6B, 0x15, 0xF2, 0x28, 0x35, 0x5C, 0x5F, 0x4D, 0x84, 0x51, 0x2D
]
pub_key = bytes(public_key_hex)

signature= [
0x5F, 0x4C, 0xDB, 0xEE, 0x70, 0x9F, 0x71, 0x23, 0xB8, 0xF1, 0x9D, 0x3B, 0xBE, 0x29, 0x01, 0xC1,
0x98, 0x5D, 0xFF, 0xFC, 0x2F, 0xB2, 0x95, 0xEE, 0xA1, 0x5F, 0x44, 0xC1, 0xF6, 0x9B, 0x2D, 0xD9,
0x22, 0xED, 0x1C, 0xD7, 0x98, 0xC3, 0x71, 0x90, 0xBC, 0x7F, 0x53, 0x0C, 0x35, 0x2D, 0xEF, 0xF1,
0x84, 0xE0, 0xA0, 0x02, 0x86, 0xDB, 0xA2, 0x33, 0xB9, 0x64, 0x14, 0xA1, 0x09, 0x20, 0xB3, 0xCB
]
vk = ecdsa.VerifyingKey.from_string(bytes.fromhex(public_key), curve=ecdsa.SECP256k1, hashfunc=sha256) # the default is sha1
vk.verify(bytes(signature), message) # True

\\
import requests
url = 'http://10.253.231.242/pots'
x = requests.get(url)
print(x.text)

\
import requests
import json
url = "http://10.253.231.242/pwm"
payload = json.dumps({
  "0": {
    "w": {"value": 500},
    "freq": {"value": 323},
    "sw":   {"value": 1}
  }
})
headers = {   'Content-Type': 'application/json' }
response = requests.request("POST", url, headers=headers, data=payload)
print(response.text)